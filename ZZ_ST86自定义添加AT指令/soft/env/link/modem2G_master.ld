/* ======================================================================= */
/*                  TARGET CONFIGURATION SECTION                           */
/* ======================================================================= */
/* The following values are defined in ff_target.def and exported by the Makefile */
/*  FLASH_SIZE              */
/*  RAM_SIZE                */
/*  CALIB_BASE              */
/*  FACT_SETTINGS_BASE      */
/*  CODE_BASE               */
/*  USER_DATA_BASE          */
/*  USER_DATA_SIZE          */
/* ======================================================================= */
/*                  END CONFIGURATION SECTION                              */
/* ======================================================================= */
/* The linker script depends on the following defines */
/*  - CONST_IN_RAM : all constants are placed in RAM, this is useful for ram_run */
/*  - CODE_IN_RAM : All code is executed from RAM, this is useful for ram_run or code running from RAM on romulator */
/*  - PRELOADED_INT_SRAM : The internal SRAM are already preloaded, useful for ram_run */
/*  - PRELOADED_RAM : The external RAM is already preloaded, useful for ram_run or simu */
/*  - __NATIVE_JAVA__ :  The Native Java need  reload it's data and bss section every time when app start*/
/* Those are constants of the system */


/* ROM content selection: things to include
    WARNING: the DISCARD section uses the opposite -->
    do all inclusion before discard !*/


/* Take into account assert bug in binutils-2.15*/
#if (USE_BINUTILS_2_19 == 1)
#define LD_ASSERT(condition, small, full)   ASSERT(condition, full)
#else
#define LD_ASSERT(condition, small, full)   ASSERT(condition, small)
#endif

#define MEM_CACHED_UNCACHED_OFFSET 0x20000000

#define FILENAME_PREFIX(pattern, sections) \
    /* Files in library */ \
    *:pattern(sections) \
    /* Files with path */ \
    */pattern(sections)

#define ROTEXT() .text .text.* .gnu.linkonce.t.*
#define RODATA() .rdata .rodata .rodata.* .gnu.linkonce.r.*
#define DATA() .data .data.* .gnu.linkonce.d.*
#define BSS() .bss .bss.* COMMON .scommon .sbss .sbss.* .sbss2 .sbss2.* .rambss .gnu.linkonce.b.*

#define BOOT_BANNED_SECTIONS() .sramtext .sramrodata .sramucdata .sramdata .sramucbss .srambss DATA() BSS()

#ifdef __NATIVE_JAVA__
#define EXCLUDE_JAVA_OBJ EXCLUDE_FILE(gcj_*.o *.oo)
#else
#define EXCLUDE_JAVA_OBJ
#endif


#if (defined(COMPRESS_PROCESS_ENABLE) && defined(CT_COMPRESS_CODE_SECTION))
#ifdef COMPRESS_3264
    #include "exclude_file_list_3264.ld"
#else
#ifdef COMPRESS_6464
    #include "exclude_file_list_6464.ld"
#else
#ifdef COMPRESS_3232
    #include "exclude_file_list_3232.ld"
#else
#ifdef	COMPRESS_QVGA3232
	#include "exclude_file_list_qvga_3232.ld"
#else
    #include "exclude_file_list.ld"
#endif
#endif
#endif
#endif
#endif

#define EXCLUDE_JAVA_APP_LIST  \
						KQQ3_Common_out.oo \
						QQ2007_128x128_out.oo \
						QQ2007_128x160_out.oo \
						QQ2007_176x220_out.oo \
						QQ2009S_240x320_out.oo \
						mreader-ziyou-01.14.10-zh_out.oo \
						ebuddy11_88z9n2z8_out.oo \
						eBuddy_nokia_2600_classic_out.oo \
						eBuddy_nokia_n73_out.oo \
						qiexigua_out.oo \
						fruitNinja_out.oo \
						Skype_lite_1.2.11_out.oo \
						Angrybirds_*.oo \
						msn_out.oo \
						Facebook_out.oo \
						snaptu_1.7.1_out.oo \
						weibo_1025001010_3333_unsigned_out.oo \
						Microblog_2.1.0.224_Java_out.oo \
						tencentweibo_1.0.0.45_java_mini_out.oo \
						mxit0_sunsang_other_out.oo \
						opera-mini-6.5.26955-advanced-zh_out.oo \
						opera-mini-6.5.26955-advanced-en_out.oo \
						UCBrowser_V8.0.3.99_Java_pf71_Build11092616_out.oo \
						UCBrowser_en_out.oo \
						buyudaren-shlq_out.oo \
						SHLQ_S700_out.oo \
						Nimbuzz_lite_out.oo \
						Nimbuzz_out.oo \
						Gmail_2.06_tbmh_out.oo \
						twitter_out.oo \
						Twim_out.oo
						
ENTRY (boot_Sector)
/*Mandatory to have the BB side irq handler linked */
EXTERN (__bb_int_handler)
EXTERN (_sxr_Irq_handler)
EXTERN (boot_LoaderEnter)
EXTERN (boot_Sector)
EXTERN (boot_Sector_Nand)


SECTIONS
{
    .check_boot_banned_sections :
    {
        FILENAME_PREFIX(boot_*.o, BOOT_BANNED_SECTIONS())
        FILENAME_PREFIX(target_boot_config.o, BOOT_BANNED_SECTIONS())
        FILENAME_PREFIX(drv_flsh_map.o, BOOT_BANNED_SECTIONS())
        /* For backward compatibility, some object files are allowed to
         * have normal data or bss sections, e.g., drv_flsh.o
         */
    }
    LD_ASSERT(SIZEOF(.check_boot_banned_sections) == 0, "BSER", "Boot files cannot contain normal data or bss sections")

#ifdef COMPRESS_PROCESS_ENABLE
    /* The load address of the compressed code should be set */
    /* to an address at which no LOD data will be generated. */
    /* Here it is set to (EXT_RAM_BASE + RAM_SIZE). */
    _compressed_code_load_start = EXT_RAM_BASE + RAM_SIZE;
#endif

#if !(defined(COMPRESS_PROCESS_ENABLE) && defined(LINK_STAGE_2))

    /* ========================================== */
    /* in External RAM                            */
    /* ========================================== */

    . = EXT_RAM_BASE;

#ifdef SPI_REG_DEBUG
    #include "spi_reg_debug.ld"
#endif

    . = ALIGN(0x100);

    /* In RAMRUN, all the RAM used by BCPU will be indicated by _bcpu_flash_end
     * instead of _bcpu_ram_bss_end */
#ifdef LOAD_BCPU_ELF
#ifndef RAMRUN
    . = _bcpu_ram_bss_end;
#endif
#endif

    . = ALIGN(0x100);

    _ram_available_base = .;

#ifndef RAMRUN
    /* ========================================== */
    /* set current location counter to flash base */
    /* ========================================== */

#if (NAND_FLASH == 1)
    /*----------------------- */
    /* NAND FLASH BOOT CODE   */
    /*----------------------- */
    /* TODO: This reserved nand boot code space can be reused after jumping to SDRAM */
    .dualport_nand_flash_boot (BB_DUALPORT_SRAM_BASE) : AT (FLASH_BASE)
    {
        _nand_flash_boot_start = .;
#ifdef ROMULATOR
        LONG(0xD9EF0045)
#else
        LONG(0xFFFFFFFF)
#endif /* ROMULATOR */

        . = ALIGN(0x10);
        _boot_sector_nand = .;
        *boot_sector_nand.o(.boot_sector_nand_start)
        *boot_sector_nand.o(ROTEXT() RODATA())
        . = ALIGN(0x10);
    }
    _nand_flash_boot_end = .;

    /* Check that the NAND flash booting code is not over stuffed */
    LD_ASSERT(ABSOLUTE(_nand_flash_boot_start) + NAND_FLASH_BOOT_CODE_SIZE >=
              ABSOLUTE(_nand_flash_boot_end), "NAND", "NAND flash booting code overflow !")

    . = FLASH_BASE + NAND_FLASH_BOOT_CODE_SIZE;

#else /* NAND_FLASH != 1 */

    . = FLASH_BASE;

#endif /* NAND_FLASH != 1 */

#endif /* !RAMRUN */

    _flash_start = .;
    /* ============================= */
    /* boot sector in flash          */
    /* ============================= */
    .boot_code _flash_start : AT (ADDR(.boot_code))
    {
#ifdef ROMULATOR
        LONG(0xD9EF0045)
#else
        LONG(0xFFFFFFFF)
#endif /* ROMULATOR */

#ifndef RAMRUN
        . = ALIGN(0x10);
        _boot_sector = .;
        *(.boot_sector_start)

        *(.boottext)
        *(.bootrodata)

        *boot_sector.o(ROTEXT() RODATA())
        *boot_sector_chip.o(ROTEXT() RODATA())
        *boot_sys.o(ROTEXT() RODATA())
        *boot_mem_init.o(ROTEXT() RODATA())
        *boot_key.o(ROTEXT() RODATA())
        *boot_sector_driver.o(ROTEXT() RODATA())
        *target_boot_config.o(ROTEXT() RODATA())
#endif /* RAMRUN */

        . = ALIGN(0x10);
    }

#ifdef LOAD_BCPU_ELF
    /* ======================================== */
    /* BCPU elf in XCPU elf */
    /* ======================================== */
    #include "link_bcpu_elf.ld"

    . = _bcpu_flash_end;
#endif

    /* ============================== */
    /* Main entry point after monitor */
    /* ============================== */

#ifndef RAMRUN
#if (CODE_BASE != FLASH_BASE)
    /* ========================================== */
    /* set current location counter to code base if it differs from flash base */
    /* ========================================== */
    LD_ASSERT(ABSOLUTE(CODE_BASE) >= ABSOLUTE(.), "CBE", "CODE_BASE is invalid. \
Note that CODE_BASE is designed to be used only when calib and factory sectors are located at flash forepart, \
and it should never be set in all other cases.")

    . = CODE_BASE;

#endif /* CODE_BASE != FLASH_BASE */
#endif /* RAMRUN */

    .main_entry_section . : AT (ADDR(.main_entry_section))
    {
#ifndef RAMRUN
        _code_base = .;
        *boot_loader.o(.text.boot_loader_start)
        *boot_loader.o(ROTEXT() RODATA())
        . = ALIGN(0x10);
#endif /* RAMRUN */

        _board_config_start = .;
        *(.board_config)
        . = ALIGN(0x10);
        _board_config_end = .;
    }
    _board_config_size = _board_config_end - _board_config_start;


    _int_rom_flash_start_location = .;

#ifdef LOAD_ROM_ELF
    /* ======================================== */
    /* internal rom in flash elf */
    /* ======================================== */
    #include "link_rom_elf.ld"
#endif

#if (defined(REWRITE_ROM_AT_BOOT) && defined(FPGA))
    _int_rom_flash_end_location = .;
#else
    _int_rom_flash_end_location = _int_rom_flash_start_location;
#endif


#if (CHIP_ASIC_ID == 6) || (CHIP_ASIC_ID == 8) /* GALLITE or 8808 */
    /* ================================================= */
    /* in BB SRAM                                        */
    /* ================================================= */
    _bb_sram_flash_start_location = _int_rom_flash_end_location;

    . = BB_SRAM_BASE;
    _bb_sram_start = .;

#ifdef LOAD_ROM_ELF

    _bb_sram_cached_size = 0;
    _bb_sram_uncached_size = 0;

#else /* !LOAD_ROM_ELF */

    /*------------------ */
    /* BB SRAM CACHED    */
    /*------------------ */
#ifndef PRELOADED_INT_SRAM
    .bbsram . : AT (_bb_sram_flash_start_location)
#else
    .bbsram . : AT (ADDR(.bbsram))
#endif
    {
        _bb_sram_cached_start = .;
        *(BB_ITLV_SECTION)
        . = ALIGN(0x4);
/*     _bb_sram_itlv_buf_end = .;*/
        *(BB_SPC_CTX_SECTION)
        . = ALIGN(0x10);
    }
    _bb_sram_cached_end = .;
    _bb_sram_cached_size = _bb_sram_cached_end - _bb_sram_cached_start;

    /*------------------ */
    /* BB SRAM UNCACHED  */
    /*------------------ */
    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

#ifndef PRELOADED_INT_SRAM
    .bbsramu . : AT (_bb_sram_flash_start_location + _bb_sram_cached_size)
#else
    .bbsramu . : AT (ADDR(.bbsramu))
#endif
    {
        _bb_sram_uncached_start = .;
        . = ALIGN(0x10);
        _mbbsramu = .;
        *(BB_STATIC_SECTION)
        . = ALIGN(0x10);
    }
    _bb_sram_uncached_end = .;
    _bb_sram_uncached_size = _bb_sram_uncached_end - _bb_sram_uncached_start;

#endif /* !LOAD_ROM_ELF */

    /* Read the symbol address from BCPU ROM */
    . = _bb_sram_romed_globals_end;

    .bbsram_globals_not_romed . (NOLOAD) : AT (ADDR(.bbsram_globals_not_romed))
    {
        _bb_sram_not_romed_globals_start = .;
        *(BB_SRAM_GLOBALS)
        *(.bbsram_globals)
        _bb_sram_not_romed_globals_end = .;
    }

    LD_ASSERT(ABSOLUTE(BB_SRAM_BASE + BB_SRAM_SIZE - RESERVED_PATCH_SIZE) >= ABSOLUTE(_bb_sram_not_romed_globals_end), "BBGS", "BBSRAM not romed globals overflow out of BBSRAM.")

    _bb_sram_var_size = _bb_sram_cached_size + _bb_sram_uncached_size;
    _bb_sram_var_end = _bb_sram_start + _bb_sram_var_size;

    /*----------------------- */
    /* BB SRAM Patch           */
    /*----------------------- */
#ifndef PRELOADED_INT_SRAM
    _bb_sram_patch_flash_start = _bb_sram_flash_start_location + _bb_sram_var_size;
#else
    _bb_sram_patch_flash_start = _bb_sram_flash_start_location;
#endif

    . = BB_SRAM_BASE + BB_SRAM_SIZE - RESERVED_PATCH_SIZE;
    _bb_sram_patch_start = .;

    .bbsram_patch_text . :
#ifndef PRELOADED_INT_SRAM
        AT (_bb_sram_patch_flash_start)
#else
        AT (ADDR(.bbsram_patch_text))
#endif
    {
        _bb_sram_patch_text_start = .;
        *(.bbsram_patch_text)
        *(.bbsram_patch_rodata)
        . = ALIGN(0x10);
        _bb_sram_patch_text_end = .;
    }
    _bb_sram_patch_text_size = _bb_sram_patch_text_end - _bb_sram_patch_text_start;

    .bbsram_patch_data . :
#ifndef PRELOADED_INT_SRAM
        AT (_bb_sram_patch_flash_start + _bb_sram_patch_text_size)
#else
        AT (ADDR(.bbsram_patch_data))
#endif
    {
        _bb_sram_patch_data_start = .;
        *(.bbsram_patch_data)
        . = ALIGN(0x10);
        _bb_sram_patch_data_end = .;
    }
    _bb_sram_patch_data_size = _bb_sram_patch_data_end - _bb_sram_patch_data_start;

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .bbsram_patch_ucdata . :
#ifndef PRELOADED_INT_SRAM
        AT (_bb_sram_patch_flash_start + _bb_sram_patch_text_size + _bb_sram_patch_data_size)
#else
        AT (ADDR(.bbsram_patch_ucdata))
#endif
    {
        _bb_sram_patch_ucdata_start = .;
        *(.bbsram_patch_ucdata)
        . = ALIGN(0x10);
        _bb_sram_patch_ucdata_end = .;
    }
    _bb_sram_patch_ucdata_size = _bb_sram_patch_ucdata_end - _bb_sram_patch_ucdata_start;

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    _bb_sram_patch_end = .;

    _bb_sram_patch_size = _bb_sram_patch_end - _bb_sram_patch_start;

#ifndef PRELOADED_INT_SRAM
    _bb_sram_patch_flash_end = _bb_sram_patch_flash_start + _bb_sram_patch_size;
#else
    _bb_sram_patch_flash_end = _bb_sram_patch_flash_start;
#endif

    _bb_sram_flash_end_location = _bb_sram_patch_flash_end;

    /*----------------------- */
    /* BB SRAM Patch BSS           */
    /*----------------------- */
    _bb_sram_patch_bss_start = .;

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .bbsram_patch_ucbss . (NOLOAD) : AT (ADDR(.bbsram_patch_ucbss))
    {
        *(.bbsram_patch_ucbss)
        . = ALIGN(0x10);
    }

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    .bbsram_patch_bss . (NOLOAD) : AT (ADDR(.bbsram_patch_bss))
    {
        *(.bbsram_patch_bss)
        . = ALIGN(0x10);
    }

    _bb_sram_patch_bss_end = .;
    _bcpu_dualport_bss_size = _bb_sram_patch_bss_end - _bb_sram_patch_bss_start;

    LD_ASSERT(ABSOLUTE(BB_SRAM_BASE + BB_SRAM_SIZE) >= ABSOLUTE(_bb_sram_patch_bss_end),
                        "BBPC", "BBSRAM patch code overflow out of BBSRAM.")

#endif /* GALLITE or 8808 */

    /* ===================================================== */
    /* in BB DUALPORT SRAM                                      */
    /* ===================================================== */
#if (CHIP_ASIC_ID == 6) || (CHIP_ASIC_ID == 8) /* GALLITE or 8808 */
    _dualport_sram_flash_start_location = _bb_sram_flash_end_location;
#else
    _dualport_sram_flash_start_location = _int_rom_flash_end_location;
#endif

#if (CHIP_ASIC_ID == 6) /* GALLITE */

    _dualport_sram_size = 0;

#else /* 8808 or later */

#if (NAND_FLASH == 1)
    . = BB_DUALPORT_SRAM_BASE + NAND_FLASH_BOOT_CODE_SIZE;
#else
    . = BB_DUALPORT_SRAM_BASE;
#endif

#ifdef LOAD_BCPU_ELF
    . = _bcpu_dualport_sram_end;
#endif

    _dualport_sram_start = .;

    .dualport_sram_text . :
#ifndef PRELOADED_INT_SRAM
        AT (_dualport_sram_flash_start_location)
#else
        AT (ADDR(.dualport_sram_text))
#endif
    {
        _dualport_sram_text_start = .;
        *(.dualport_sram_text)
        *(.dualport_sram_rodata)
#if (CHIP_ASIC_ID == 8) /* 8808 */
        *wifi_sha1.o(.text .text.* .rodata .rodata.*)
#endif
        . = ALIGN(0x10);
        _dualport_sram_text_end = .;
    }
    _dualport_sram_text_size = _dualport_sram_text_end - _dualport_sram_text_start;

    .dualport_sram_data . :
#ifndef PRELOADED_INT_SRAM
        AT (_dualport_sram_flash_start_location + _dualport_sram_text_size)
#else
        AT (ADDR(.dualport_sram_data))
#endif
    {
        _dualport_sram_cached_data_start = .;
        *(.dualport_sram_data)
        . = ALIGN(0x10);
        _dualport_sram_cached_data_end = .;
    }
    _dualport_sram_cached_data_size = _dualport_sram_cached_data_end - _dualport_sram_cached_data_start;

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .dualport_sram_ucdata . :
#ifndef PRELOADED_INT_SRAM
        AT (_dualport_sram_flash_start_location + _dualport_sram_text_size + _dualport_sram_cached_data_size)
#else
        AT (ADDR(.dualport_sram_ucdata))
#endif
    {
        _dualport_sram_uncached_data_start = .;
        *(.dualport_sram_ucdata)
        . = ALIGN(0x10);
        _dualport_sram_uncached_data_end = .;
    }
    _dualport_sram_uncached_data_size = _dualport_sram_uncached_data_end - _dualport_sram_uncached_data_start;

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    _dualport_sram_end =  .;
    _dualport_sram_size = _dualport_sram_end - _dualport_sram_start;

    /*----------------------- */
    /* BB DUALPORT SRAM BSS      */
    /*----------------------- */
    _dualport_bss_start = .;

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .dualport_sram_ucbss . (NOLOAD) : AT (ADDR(.dualport_sram_ucbss))
    {
        *(.dualport_sram_ucbss)
        . = ALIGN(0x10);
    }

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    .dualport_sram_bss . (NOLOAD) : AT (ADDR(.dualport_sram_bss))
    {
        *(.dualport_sram_bss)
        . = ALIGN(0x10);
    }

    _dualport_bss_end = .;
    _dualport_bss_size = _dualport_bss_end - _dualport_bss_start;

    LD_ASSERT(ABSOLUTE(BB_DUALPORT_SRAM_BASE + BB_DUALPORT_SRAM_SIZE - RESERVED_MBX_SIZE) >= ABSOLUTE(_dualport_bss_end), "DPOV", "BB DUALPORT SRAM overflow.")

#endif /* (CHIP_ASIC_ID != 6) */

#ifndef PRELOADED_INT_SRAM
    _dualport_sram_flash_end_location = _dualport_sram_flash_start_location + _dualport_sram_size;
#else
    _dualport_sram_flash_end_location = _dualport_sram_flash_start_location;
#endif

    /* ===================================================== */
    /* in SYS SRAM                                           */
    /* ===================================================== */

    /*----------------- */
    /* SYS SRAM UNCACHED */
    /*----------------- */

#ifdef RAMRUN
    /* For ramruns, this section loads an execution context
     * content allowing to directly executed the
     * boot sector (preloaded with PC=boot_Sector and SP=0,
     * cf boot_sector.c) */
#if (CHIP_ASIC_ID == 6) || (CHIP_ASIC_ID == 8) || (CHIP_ASIC_ID == 9)
    /* .sram_hst_monitor_ctx on gallite, 8808, and 8809 is loaded at cached address */
     _executor_ctx_address_offset = 0;
#else
    /* .sram_hst_monitor_ctx is loaded at uncached address */
     _executor_ctx_address_offset = MEM_CACHED_UNCACHED_OFFSET;
#endif
    .executor_ctx ROM_MISC_UBASE : AT (ADDR(.executor_ctx) - _executor_ctx_address_offset)
    {
        /* For ramruns, avoid removing .executor_ctx even when option
         * --gc-sections is enabled, as its content must be loaded from
         * the ramrun lod */
        KEEP(*(.executor_ctx))
    }
#endif

    /*----------------- */
    /* SYS SRAM CACHED  */
    /*----------------- */

    LD_ASSERT(ABSOLUTE(__int_rom_reserved_end) <= ROM_MISC_BASE + ROM_MISC_SIZE, "RRRO", "Reserved Ram Reserved for Rom Overflowed")

    . = ROM_MISC_BASE + ROM_MISC_SIZE;

    /* HAL Boot Sector reload structure, contains information written by
     * HAL during the normal execution of the code and used by the
     * Boot Sector to reload the ram image when the phone boots.
     * It is mapped in the Internal SRAM because we don't want the Boot
     * Sector code to access the External RAM. And it is mapped at a fixed
     * location (after the last patch for the chip) because we
     * don't want the RAMRUN to overwrite it.
     * This structure is "no load" as we don't want it to be loaded
     * by the Ramrun process. */
    .hal_boot_sector_reload_struct . (NOLOAD) :
        AT (ADDR(.hal_boot_sector_reload_struct))
    {
        KEEP(*(.hal_boot_sector_reload_struct))
    }

    /* HAL Boot Sector structure, contains information written by
     * HAL during the normal execution of the code and used by the
     * Boot Sector when the phone boots.
     * It is mapped in the Internal SRAM because we don't want the Boot
     * Sector code to access the External RAM. And it is mapped at a fixed
     * location (after the last patch for the chip) because we
     * don't want the RAMRUN to overwrite it.
     * This structure is "no load" as we don't want it to be loaded
     * by the Ramrun process. */
    .boot_sector_struct . (NOLOAD) :
        AT (ADDR(.boot_sector_struct))
    {
        KEEP(*(.boot_sector_struct))
    }

    /* Boot Sector reload structure pointer, used to retrieve the
     * structure filled by HAL and used by the Boot Sector code.
     * This structure is "no load" as we don't want it to be loaded
     * by the Ramrun process. */
    .boot_sector_reload_struct_ptr (SYS_SRAM_AVAILABLE_BASE-4-4-4) (NOLOAD) :
        AT (ADDR(.boot_sector_reload_struct_ptr))
    {
        KEEP(*(.boot_sector_reload_struct_ptr))
    }

    /* Boot Sector structure pointer, used to retrieve the command
     * structure filled by HAL and used by the Boot Sector code.
     * This structure is "no load" as we don't want it to be loaded
     * by the Ramrun process. */
    .boot_sector_struct_ptr (SYS_SRAM_AVAILABLE_BASE-4-4) (NOLOAD) :
        AT (ADDR(.boot_sector_struct_ptr))
    {
        KEEP(*(.boot_sector_struct_ptr))
    }

    /* Fixed pointer, used to retrieve the map structure. */
    .fixptr (SYS_SRAM_AVAILABLE_BASE-4) (NOLOAD) : AT (ADDR(.fixptr))
    {
        KEEP(*(.fixptr))
    }

    . = SYS_SRAM_AVAILABLE_BASE;

    /* ------------------------------------------------ */
    /* SYS SRAM IRQ - IRQ HANDLER IN SYS SRAM */
    /* ------------------------------------------------ */
    _irq_sys_sram_flash_start_location = _dualport_sram_flash_end_location;

    _irq_sys_sram_start = .;
#ifndef PRELOADED_INT_SRAM
    .irqsram . : AT (_irq_sys_sram_flash_start_location)
#else
    .irqsram . : AT (ADDR(.irqsram))
#endif
    {
        *hal_irq_handler.o(.irqtext)
        *hal_irq_handler.o(.text .text.* .sramtext .rdata .rodata .rodata.*)
        . = ALIGN(0x10);
    }
    _irq_sys_sram_end = .;
    _irq_sys_sram_size = _irq_sys_sram_end - _irq_sys_sram_start;

#ifndef PRELOADED_INT_SRAM
    _irq_sys_sram_flash_end_location = _irq_sys_sram_flash_start_location + _irq_sys_sram_size;
#else
    _irq_sys_sram_flash_end_location = _irq_sys_sram_flash_start_location;
#endif

#ifdef LOAD_BCPU_ELF
    . = _bcpu_sys_sram_end;
#endif

    /* ------------------------------------------------ */
    /* BOOTING TEXT AND DATA SECTIONS IN SYS SRAM */
    /* ------------------------------------------------ */
    _boot_sys_sram_flash_start_location = _irq_sys_sram_flash_end_location;

    _boot_sys_sram_start = .;

    _boot_sys_sram_txt_start = .;
#ifndef PRELOADED_INT_SRAM
    .bootsramtext . : AT (_boot_sys_sram_flash_start_location)
#else
    .bootsramtext . : AT (ADDR(.bootsramtext))
#endif
    {
        *(.bootsramtext)

        *drv_flsh.o(.sramtext)
        *hal_ebc.o(.sramtext)
        *hal_flash.o(.sramtext)
        . = ALIGN(0x10);
    }
    _boot_sys_sram_txt_end = .;
    _boot_sys_sram_txt_size = _boot_sys_sram_txt_end - _boot_sys_sram_txt_start;

    _boot_sys_sram_data_start = .;
#ifndef PRELOADED_INT_SRAM
    .bootsramdata . : AT (_boot_sys_sram_flash_start_location + _boot_sys_sram_txt_size)
#else
    .bootsramdata . : AT (ADDR(.bootsramdata))
#endif
    {
        *(.bootsramdata)

        *drv_flsh.o(.sramdata)
        *hal_ebc.o(.sramdata)
        *hal_flash.o(.sramdata)
        . = ALIGN(0x10);
    }
    _boot_sys_sram_data_end = .;
    _boot_sys_sram_data_size = _boot_sys_sram_data_end - _boot_sys_sram_data_start;

    _boot_sys_sram_end = .;
    _boot_sys_sram_size = _boot_sys_sram_end - _boot_sys_sram_start;

#ifndef PRELOADED_INT_SRAM
    _boot_sys_sram_flash_end_location = _boot_sys_sram_flash_start_location + _boot_sys_sram_size;
#else
    _boot_sys_sram_flash_end_location = _boot_sys_sram_flash_start_location;
#endif

    /* ------------------------------------------------ */
    /* NON-BOOTING TEXT AND DATA SECTIONS IN SYS SRAM */
    /* ------------------------------------------------ */
    _sys_sram_flash_start_location = _boot_sys_sram_flash_end_location;

    _sys_sram_start = .;
    _sys_sram_cached_start = .;

#ifndef PRELOADED_INT_SRAM
    .sramtext . : AT (_sys_sram_flash_start_location)
#else
    .sramtext . : AT (ADDR(.sramtext))
#endif
    {
        _sys_sram_txt_start = .;

        *(.sramtext .sramrodata)

#ifdef RAMRUN
        _boot_sector = .;
        *(.boot_sector_start)

        *(.boottext)
        *(.bootrodata)

        *boot_sector.o(ROTEXT() RODATA())
        *boot_sector_chip.o(ROTEXT() RODATA())
        *boot_sys.o(ROTEXT() RODATA())
        *boot_mem_init.o(ROTEXT() RODATA())
        *boot_key.o(ROTEXT() RODATA())
        *boot_sector_driver.o(ROTEXT() RODATA())
        *target_boot_config.o(ROTEXT() RODATA())

        _code_base = .;
        *boot_loader.o(.text.boot_loader_start)
        *boot_loader.o(ROTEXT() RODATA())
#endif /* RAMRUN */

        *pal_gsmr.o(ROTEXT())
        *sxr_mem.o(ROTEXT())
        *sxr_jbsd.o(ROTEXT())

#if (CHIP_ASIC_ID != 8) /* not 8808 */
        *wifi_sha1.o(ROTEXT() RODATA())
#endif

        . = ALIGN(0x10);
    }
    _sys_sram_txt_end = .;
    _sys_sram_txt_size = _sys_sram_txt_end - _sys_sram_start;


#ifndef PRELOADED_INT_SRAM
    .sramdata _sys_sram_txt_end : AT (_sys_sram_flash_start_location + _sys_sram_txt_size )
#else
    .sramdata _sys_sram_txt_end : AT (ADDR(.sramdata))
#endif
    {
        _sys_sram_data_start = .;
        *(.sramdata)

        *pal_gsmr.o(.data .data.* .gnu.linkonce.d.* .data1)
        *pal_gsmr.o(.sdata .sdata.* .gnu.linkonce.s.*)
        *pal_gsmr.o(.sdata2 .sdata2.* .gnu.linkonce.s2.*)

        *(.srrodata)
        . = ALIGN(0x10);
    }
    _sys_sram_data_end = .;
    _sys_sram_cached_end = .;
    _sys_sram_data_size = _sys_sram_data_end - _sys_sram_data_start;
    _sys_sram_cached_size = _sys_sram_cached_end - _sys_sram_cached_start;

    /*-------------------- */
    /* SYS SRAM UNCACHED   */
    /*-------------------- */
    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

#ifndef PRELOADED_INT_SRAM
    .sramucdata . : AT (_sys_sram_flash_start_location + _sys_sram_cached_size)
#else
    .sramucdata . : AT (ADDR(.sramucdata))
#endif
    {
        _sys_sram_uncached_start = .;
        *(.sramucdata)
        *(.srroucdata)
        . = ALIGN(0x10);
    }
    _sys_sram_uncached_end = .;
    _sys_sram_uncached_size = _sys_sram_uncached_end - _sys_sram_uncached_start;

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    _sys_sram_end =  .;
    _sys_sram_size = _sys_sram_end - _sys_sram_start;

#ifndef PRELOADED_INT_SRAM
    _sys_sram_flash_end_location = _sys_sram_flash_start_location + _sys_sram_size;
#else
    _sys_sram_flash_end_location = _sys_sram_flash_start_location;
#endif

    /* ------------------------------------------------ */
    /* BOOTING BSS IN SYS SRAM (content reset to 0 ) */
    /* ------------------------------------------------ */
    _boot_sys_sram_bss_start = .;
    .bootsrambss . (NOLOAD) : AT (ADDR(.bootsrambss))
    {
        *(.bootsrambss)
        . = ALIGN(0x10);
    }
    _boot_sys_sram_bss_end = .;
    _boot_sys_sram_bss_size = _boot_sys_sram_bss_end - _boot_sys_sram_bss_start;

    /*----------------------- */
    /* SYS SRAM BSS           */
    /*----------------------- */
    _sys_sram_bss_start = .;

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .sramucbss . (NOLOAD) : AT (ADDR(.sramucbss))
    {
        *(.sramucbss)
        . = ALIGN(0x10);
    }

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    .srambss . (NOLOAD) : AT (ADDR(.srambss))
    {
        *(.srambss)
        . = ALIGN(0x10);
    }

    _sys_sram_bss_end = .;
    _sys_sram_bss_size = _sys_sram_bss_end - _sys_sram_bss_start;

    /* Overlay in SYS SRAM*/
    _sys_sram_overlay_start = .;
    OVERLAY . : NOCROSSREFS AT (_sys_sram_flash_end_location)
    {
        #include "int_sram_overlay.ld"
    }

    /* ld-2.15 End of overlay bug workaround (Manual calculation)*/
    _sys_sram_overlay_end           = _sys_sram_overlay_start + MAX_SIZE_OF_SYS_SRAM_OVERLAY;
    . = _sys_sram_overlay_end;

    _sys_sram_overlay_flash_size    = FLASH_SIZE_OF_SYS_SRAM_OVERLAY;

    _sys_sram_overlay_flash_end_location = _sys_sram_flash_end_location + _sys_sram_overlay_flash_size;

    /*----------------------- */
    /* SYS SRAM HEAP 1        */
    /*----------------------- */
    _sys_sram_heap_start = _sys_sram_overlay_end;

    _sys_sram_top = SYS_SRAM_END; /* End of internal sram */
    _sys_sram_heap_end = _sys_sram_top - (SYS_SRAM_IRQ_STACKWATCH_SIZE) - (XCPU_IRQ_STACK_SIZE);

    _sys_sram_heap_size = _sys_sram_heap_end - _sys_sram_heap_start;

    /* Check that the INT SRAM is not over stuffed */
    LD_ASSERT(ABSOLUTE(_sys_sram_heap_end) > ABSOLUTE(_sys_sram_heap_start), "INTS", "Internal SRAM overflow !")

    /*----------------------- */
    /* SYS SRAM IRQ STACK WATCH */
    /*----------------------- */
    _sys_sram_irq_stackwatch_size = (SYS_SRAM_IRQ_STACKWATCH_SIZE) - (PS_STACK_SIZE) ;
    _sys_sram_irq_stackwatch_start = _sys_sram_heap_end;
    _sys_sram_irq_stackwatch_end = _sys_sram_irq_stackwatch_start + _sys_sram_irq_stackwatch_size;

#ifdef PAGE_SPY_LOG
    _sys_sram_sp_stack_start = _sys_sram_irq_stackwatch_end;
    _sys_sram_sp_stack_end = . + PS_STACK_SIZE - 4;
#endif

    /* Caution, _sys_sram_non_romed_top is used by the boot ROM code. */
    .sram_romed_top (SYS_SRAM_END) (NOLOAD) : AT (ADDR(.sram_romed_top))
    {
        _sys_sram_non_romed_top = .;
    }

    /*---------------- */
    /* End of SYS SRAM */
    /*---------------- */

#if (CHIP_HAS_PROXY_MEMORY == 1)
    /* ========================================== */
    /* Proxy Memory                               */
    /* ========================================== */
    /* Standard usage of proxy memory */
    /* Manual placing and copy from flash */
    _proxy_memory_flash_start_location = _sys_sram_overlay_flash_end_location;
#ifndef PRELOADED_PROXY_MEMORY
    .proxy_memory SYS_PROXY_MEM_BASE : AT (_proxy_memory_flash_start_location)
#else
    .proxy_memory SYS_PROXY_MEM_BASE : AT (ADDR(.proxy_memory))
#endif
    {
        _proxy_memory_start = .;
        /* Loadable as a ramrun since the proxy memory is enabled
         * by the romed monitor. */
        *sxs_rlm.o(.text .text.*)
        *sxr_rlm.o(.text .text.*)
        *hal_timer.o(.text .text.*)
        *sxr_tksd.o(.text .text.*)
        *sxs_io.o(.text .text.*)
        *sxr_tls.o(.text .text.*)
        *sxs_tls.o(.text .text.*)
        *sxr_sbx.o(.text .text.*)
        *sxs_sbx.o(.text .text.*)
        *sxr_tim.o(.text .text.*)
        *hal_trace.o(.text .text.*)
        . = ALIGN(0x10);
    }

    _proxy_memory_end = . ;
    _proxy_memory_size = _proxy_memory_end - _proxy_memory_start ;

#ifndef PRELOADED_PROXY_MEMORY
    _proxy_memory_flash_end_location = _proxy_memory_flash_start_location + _proxy_memory_size;
#else
    _proxy_memory_flash_end_location = _proxy_memory_flash_start_location;
#endif

    /* Overlay in Proxy Memory */
    _fast_cpu_memory_overlay_start = .;
    OVERLAY . : NOCROSSREFS AT (_proxy_memory_flash_end_location)
    {
        #include "fast_cpu_memory_overlay.ld"
    }

    /* ld-2.15 End of overlay bug workaround (Manual calculation)*/
    _fast_cpu_memory_overlay_end           = _fast_cpu_memory_overlay_start + MAX_SIZE_OF_FAST_CPU_MEMORY_OVERLAY;

    . = _fast_cpu_memory_overlay_end;

    _fast_cpu_memory_overlay_flash_size    = FLASH_SIZE_OF_FAST_CPU_MEMORY_OVERLAY;
    _fast_cpu_memory_overlay_flash_end_location = _proxy_memory_flash_end_location + _fast_cpu_memory_overlay_flash_size;

    _proxy_memory_top = SYS_PROXY_MEM_BASE + SYS_PROXY_MEM_SIZE - 4;
    _proxy_memory_overlay_top = _proxy_memory_top - XCPU_IRQ_STACK_SIZE;
    LD_ASSERT(ABSOLUTE(_fast_cpu_memory_overlay_end) < ABSOLUTE(_proxy_memory_overlay_top), "SPMO", "System Proxy Memory Overlfow !!!")

    /* ========================================== */
    /* End of Proxy Memory                        */
    /* ========================================== */
#else /* CHIP_HAS_PROXY_MEMORY */
    _fast_cpu_memory_overlay_flash_end_location = _sys_sram_overlay_flash_end_location;
#endif /* CHIP_HAS_PROXY_MEMORY */


    /* ========================================== */
    /* continued in External RAM                  */
    /* ========================================== */
    _boot_ram_flash_start_location = _fast_cpu_memory_overlay_flash_end_location;

#ifndef RAMRUN
    . = _ram_available_base;
#else /* RAMRUN */
    /* In a RAMRUN, all the flash content will be put in the ram, and
     * _ram_flash_start_location is in fact pointing to a ram location. */
    . = _boot_ram_flash_start_location;
#endif /* RAMRUN */

    /* ------------------------------------------------ */
    /* BOOTING TEXT AND DATA SECTIONS IN RAM */
    /* ------------------------------------------------ */
    _boot_ram_start = .;

    _boot_ram_txt_start = .;
#ifndef PRELOADED_RAM
    .bootramtext . : AT (_boot_ram_flash_start_location )
#else
    .bootramtext . : AT (ADDR(.bootramtext))
#endif
    {
        /* The flash driver must always be in RAM
         * because we need to be able to execute its code
         * when writing any sectors (For examplen, the calibration
         * sector which is on the first bank.
         * And so must be the functions called by the
         * flash drivers. */
        *(.bootramtext)

        *drv_flsh.o(ROTEXT() RODATA())
        *drv_flsh_map.o(ROTEXT() RODATA())
        *hal_ebc.o(ROTEXT() RODATA())
        *hal_flash.o(ROTEXT() RODATA())
        . = ALIGN(0x10);
    }
    _boot_ram_txt_end = .;
    _boot_ram_txt_size = _boot_ram_txt_end - _boot_ram_txt_start;

    _boot_ram_cached_data_start = .;
#ifndef PRELOADED_RAM
    .bootdata . : AT (_boot_ram_flash_start_location + _boot_ram_txt_size)
#else
    .bootdata . : AT (ADDR(.bootdata))
#endif
    {
        /* The flash driver must always be in RAM
         * because we need to be able to execute its code
         * when writing any sectors (For examplen, the calibration
         * sector which is on the first bank.
         * And so must be the functions called by the
         * flash drivers. */
        *(.bootdata)

        *drv_flsh.o(DATA())
        *hal_ebc.o(DATA())
        *hal_flash.o(DATA())
        . = ALIGN(0x10);
    }
    _boot_ram_cached_data_end = .;
    _boot_ram_cached_data_size = _boot_ram_cached_data_end - _boot_ram_cached_data_start;

    _boot_ram_end = .;
    _boot_ram_size = _boot_ram_end - _boot_ram_start;

#ifndef PRELOADED_RAM
    _boot_ram_flash_end_location =  _boot_ram_flash_start_location + _boot_ram_size;
#else
    _boot_ram_flash_end_location = _boot_ram_flash_start_location;
#endif

    /* ------------------------------------------------ */
    /* NON-BOOTING TEXT AND DATA SECTIONS IN RAM */
    /* ------------------------------------------------ */
    _ram_flash_start_location = _boot_ram_flash_end_location;

    _ram_start = .;

    /* ------------------------------------------------ */
    /* Ext RAM CACHED  - SECTIONS ALWAYS IN RAM */
    /* ------------------------------------------------ */
#ifndef PRELOADED_RAM
    .ram . : AT (_ram_flash_start_location)
#else
    .ram . : AT (ADDR(.ram))
#endif
    {
        _ram_special_cached_start = .;
        _ram_txt_start = .;
        *(.ram)
        . = ALIGN(0x10);
    }
    _ram_special_cached_end = .;
    _ram_special_cached_size = _ram_special_cached_end - _ram_special_cached_start;

    /*---------------------------- */
    /* Ext RAM CACHED TXT          */
    /*---------------------------- */
#ifndef PRELOADED_RAM
    .ramtext _ram_special_cached_end : AT (_ram_flash_start_location + _ram_special_cached_size)
#else
    .ramtext _ram_special_cached_end : AT (ADDR(.ramtext))
#endif /*PRELOADED_RAM*/
    {
        _ram_cached_txt_start = .;
#ifdef CODE_IN_RAM
        *(.text .text.* .stub .gnu.linkonce.t.*)
#endif

#ifdef PROTOSTACK_IN_RAM
        #include "section_stack_gprs.ld"
#endif

#ifdef __NATIVE_JAVA__
        *tinygc.oo(.text .text.* .rodata .rodata.*)
        *unwind-sjlj.o(.text .text.* .rodata .rodata.*)
#endif
        /* libgcc's softfloat library */
        _pack*f.o(.text .text.* .rodata .rodata.*)
        _unpack*f.o(.text .text.* .rodata .rodata.*)
        _*f.o(.text .text.* .rodata .rodata.*)
        *_lshrdi3.o(.text .text.* .rodata .rodata.*)
        *_ashldi3.o(.text .text.* .rodata .rodata.*)
        *_fixunssfsi.o(.text .text.* .rodata .rodata.*)
        *_fixunsdfsi.o(.text .text.* .rodata .rodata.*)
        *_fixdfdi.o(.text .text.* .rodata .rodata.*)
        *_fixunsdfdi.o(.text .text.* .rodata .rodata.*)
        *_divdi3.o(.text .text.* .rodata .rodata.*)
        *_moddi3.o(.text .text.* .rodata .rodata.*)
        *_udivdi3.o(.text .text.* .rodata .rodata.*)
        *_umoddi3.o(.text .text.* .rodata .rodata.*)
        *_sf_to_si.o(.text .text.* .rodata .rodata.*)
        *_df_to_si.o(.text .text.* .rodata .rodata.*)
        *_divdi3.o(.text .text.* .rodata .rodata.*)
        *_ashrdi3.o(.text .text.* .rodata .rodata.*)
        *_clzsi2.o(.text .text.* .rodata .rodata.*)

#ifdef CONST_IN_RAM
        *(.rdata)
        *(.rodata .rodata.* .gnu.linkonce.r.*)
        *(.rodata1)
        *(.ctors)
#endif
        . = ALIGN(0x10);
    } = 0
    _ram_cached_txt_end = .;
    ram_cached_txt_size = _ram_cached_txt_end - _ram_cached_txt_start;

    _ram_txt_end = .;

    /*---------------------- */
    /* Ext RAM UNCACHED Data */
    /*---------------------- */
    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

#ifndef PRELOADED_RAM
    .ucdata . : AT (_ram_flash_start_location + _ram_special_cached_size + ram_cached_txt_size)
#else
    .ucdata . : AT (ADDR(.ucdata))
#endif
    {
        _ram_uncached_data_start = .;
        *(.ucdata)
        *(*.globalvars.uc)
        . = ALIGN(0x10);
    }
    _ram_uncached_data_end = .;
    _ram_uncached_data_size = _ram_uncached_data_end - _ram_uncached_data_start;

    /*---------------------- */
    /* Ext RAM CACHED Data */
    /*---------------------- */
    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;
#ifndef PRELOADED_RAM
    .data . : AT (_ram_flash_start_location + _ram_special_cached_size + ram_cached_txt_size + _ram_uncached_data_size)
#else
    .data . : AT (ADDR(.data))
#endif
    {
        _ram_cached_data_start = . ;

        /* NOTE: globalvars.c sections are to be removed.
         * They are kept here for backward compatibility of SVC/VPP codes.
         * These codes are linked from Total_BJ branch and the special global
         * variable sections will be removed in the future. */
        *(*.globalvars.c *.globalvars.c.*)

        *(EXCLUDE_JAVA_OBJ .data)
        *(EXCLUDE_JAVA_OBJ .data.*)
        *(EXCLUDE_JAVA_OBJ .gnu.linkonce.d.*)
        *(.data1)
        _gp = ALIGN(16) + 0x7ff0;
        *(.sdata .sdata.* .gnu.linkonce.s.*)
        *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
        *(.lit8)
        *(.lit4)
        . = ALIGN(0x4);
        /***barrier : do not remove or edit */
        . = ALIGN(0x10);
    }
    _ram_cached_data_end = . ;
    _ram_cached_data_size = _ram_cached_data_end - _ram_cached_data_start;
    _ram_end = .;
    _ram_size = _ram_end - _ram_start;

#ifndef PRELOADED_RAM
    _ram_flash_end_location =  _ram_flash_start_location + _ram_size;
#else
    _ram_flash_end_location = _ram_flash_start_location;
#endif

    /*-------------------------------------------------------  */
    /* Uninitialized section in RAM (content kept after reboot)*/
    /*-------------------------------------------------------  */
    .backup . (NOLOAD) : AT (ADDR(.backup))
    {
        *(.backup)
        . = ALIGN(0x10);
    }

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .ucbackup . (NOLOAD) : AT (ADDR(.ucbackup))
    {
        *(.ucbackup)
        . = ALIGN(0x10);
    }

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    /* ------------------------------------------------ */
    /* BOOTING BSS (content reset to 0 ) */
    /* ------------------------------------------------ */
    _boot_ram_bss_start = .;
    .bootbss . (NOLOAD) : AT (ADDR(.bootbss))
    {
        /* The flash driver must always be in RAM
         * because we need to be able to execute its code
         * when writing any sectors (For examplen, the calibration
         * sector which is on the first bank.
         * And so must be the functions called by the
         * flash drivers.*/
        *(.bootbss)

        *drv_flsh.o(BSS())
        *hal_ebc.o(BSS())
        *hal_flash.o(BSS())
        . = ALIGN(0x10);
    }
    _boot_ram_bss_end = .;
    _boot_ram_bss_size = _boot_ram_bss_end - _boot_ram_bss_start;

    /*-------------------------------------------------------  */
    /* RAM BSS (content reset to 0 )                           */
    /*-------------------------------------------------------  */
    _ram_bss_start = .;

    /* Go Uncached */
    . += MEM_CACHED_UNCACHED_OFFSET;

    .ucbss . (NOLOAD) : AT (ADDR(.ucbss))
    {
        *(.ucbss)
        *(.ramucbss)
        . = ALIGN(0x10);
    }

    /* Go Cached */
    . -= MEM_CACHED_UNCACHED_OFFSET;

    .bss . (NOLOAD) : AT (ADDR(.bss))
    {
#ifdef __NATIVE_JAVA__
        . = ALIGN(0x4);
        _gcj_ram_bss_start = .;
        gcj_*.o(.bss .bss.* .gnu.linkonce.b.* .sbss .sbss.* .gnu.linkonce.sb.* .sbss2 .sbss2.* .gnu.linkonce.sb2.* .scommon .dynbss COMMON)
        *.oo(.bss .bss.* .gnu.linkonce.b.* .sbss .sbss.* .gnu.linkonce.sb.* .sbss2 .sbss2.* .gnu.linkonce.sb2.* .scommon .dynbss COMMON)
        . = ALIGN(0x4);
        _gcj_ram_bss_end = .;
#endif
        *(.sbss .sbss.* .gnu.linkonce.sb.*)
        *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
        *(.scommon)
        *(.dynbss)
        *(.bss .bss.* .gnu.linkonce.b.*)
        *(COMMON)
        *(.rambss)
        . = ALIGN(0x10);
    }

#ifdef __NATIVE_JAVA__
    #include "compress_data_section.ld"
#endif

    _ram_bss_end = .;
    _ram_bss_size = _ram_bss_end - _ram_bss_start;

    /*----------- */
    /* End of RAM */
    /*----------- */
    _ram_top = EXT_RAM_BASE + RAM_SIZE;
	_heap_size = _ram_top - _ram_bss_end;
	_heap_start = _ram_bss_end;
	_heap_end = _ram_bss_end + _heap_size;

	LD_ASSERT(ABSOLUTE(_ram_top) > ABSOLUTE(_ram_bss_end), "EXTS", "External RAM overflow !")

    /*========================================================= */
    /* In FLASH                                                 */
    /*========================================================= */
    _rom_flash_start_location = _ram_flash_end_location;
    . = _rom_flash_start_location;

    /* .crossrefs section can be used to list functions which is share by other application */
    .crossrefs . : AT (ADDR(.crossrefs))
    {
        *(.crossref)
        . = ALIGN(0x10);
    }

#ifndef COMPRESS_PROCESS_ENABLE
    .init . : AT(ADDR(.init))
    {
        *(.init)
        . = ALIGN(0x10);
    }
#endif
#ifdef __NATIVE_JAVA__
    .dtors . : AT(ADDR(.dtors))
    {
        KEEP(*(.dtors .dtors.*))
        KEEP(*(.dtor .dtor.*))
        . = ALIGN(0x10);
    }
    .except_table . : AT(ADDR(.except_table))
    {
        *(.gcc_except_table .gcc_except_table.*)
        . = ALIGN(0x10);
    }
#ifndef CT_COMPRESS_CODE_SECTION    
    .gcj_text_qq . : AT(ADDR(.gcj_text_qq))
    {
    	*KQQ3_Common_out.oo(.text .text.* .rodata .rodata.*)
    	*QQ2007_128x128_out.oo(.text .text.* .rodata .rodata.*)
    	*QQ2007_176x220_out.oo(.text .text.* .rodata .rodata.*)
    	*QQ2007_128x160_out.oo(.text .text.* .rodata .rodata.*)
    	*QQ2009S_240x320_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_mreader . : AT(ADDR(.gcj_text_mreader))
    {
    	*mreader-ziyou-01.14.10-zh_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_ebuddy . : AT(ADDR(.gcj_text_ebuddy))
    {
    	*ebuddy11_88z9n2z8_out.oo(.text .text.* .rodata .rodata.*)
    	*eBuddy_nokia_2600_classic_out.oo(.text .text.* .rodata .rodata.*)
    	*eBuddy_nokia_n73_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_skype . : AT(ADDR(.gcj_text_skype))
    {
    	*Skype_lite_1.2.11_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_facebook . : AT(ADDR(.gcj_text_facebook))
    {
    	*Facebook_out.oo(.text .text.* .rodata .rodata.*)
    	*snaptu_1.7.1_outt.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_msncn . : AT(ADDR(.gcj_text_msncn))
    {
    	*msn_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_qiexig . : AT(ADDR(.gcj_text_qiexig))
    {
    	*qiexigua_out.oo(.text .text.* .rodata .rodata.*)
    	*fruitNinja_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_weibo . : AT(ADDR(.gcj_text_weibo))
    {
    	*weibo_1025001010_3333_unsigned_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_tencentweibo . : AT(ADDR(.gcj_text_tencentweibo))
    {
    	*Microblog_2.1.0.224_Java_out.oo(.text .text.* .rodata .rodata.*)
    	*tencentweibo_1.0.0.45_java_mini_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_mxit . : AT(ADDR(.gcj_text_mxit))
    {
    	*mxit0_sunsang_other_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }   
    .gcj_text_operamini . : AT(ADDR(.gcj_text_operamini))
    {
    	*opera-mini-6.5.26955-advanced-zh_out.oo(.text .text.* .rodata .rodata.*)
    	*opera-mini-6.5.26955-advanced-en_out.oo(.text .text.* .rodata .rodata.*)
    	*UCBrowser_V8.0.3.99_Java_pf71_Build11092616_out.oo(.text .text.* .rodata .rodata.*)
    	*UCBrowser_en_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }   
    .gcj_text_angrybirds . : AT(ADDR(.gcj_text_angrybirds))
    {
    	*Angrybirds_*.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }    
    .gcj_text_buyudaren . : AT(ADDR(.gcj_text_buyudaren))
    {
    	*buyudaren-shlq_out.oo(.text .text.* .rodata .rodata.*)
    	*SHLQ_S700_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }    
     .gcj_text_nimbuzz . : AT(ADDR(.gcj_text_nimbuzz))
    {
    	*Nimbuzz_lite_out.oo(.text .text.* .rodata .rodata.*)
    	*Nimbuzz_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }    
    .gcj_text_gmail . : AT(ADDR(.gcj_text_gmail))
    {
    	*Gmail_2.06_tbmh_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    .gcj_text_twitter . : AT(ADDR(.gcj_text_twitter))
    {
    	*twitter_out.oo(.text .text.* .rodata .rodata.*)
    	*Twim_out.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
    
    .gcj_text_lib . : AT(ADDR(.gcj_text_lib))
    {
    	*.oo(.text .text.* .rodata .rodata.*)
	. = ALIGN(0x10);
    }
#endif    
#endif			
    .rotext . : AT (ADDR(.rotext))
    {
        #ifndef CODE_IN_RAM
            *(EXCLUDE_FILE(EXCLUDE_FILE_LIST) .text)
            *(EXCLUDE_FILE(EXCLUDE_FILE_LIST) .text.*)
            *(.stub .gnu.linkonce.t.*)
        #endif
        . = ALIGN(0x10);
    }
    /*
    .rodata_str . : AT (ADDR(.rodata_str))
    {
            *(.rodata.str*)
            *(.rodata.jutf*)
            . = ALIGN(0x10);
    }
    */
     . = ALIGN(0x20);
    .rodata . : AT (ADDR(.rodata))
    {
        #ifndef CONST_IN_RAM
            *(.rdata)
            *(EXCLUDE_FILE(EXCLUDE_FILE_LIST *feature.o *bigcode.o *index.o *pag1.o) .rodata)
            *(EXCLUDE_FILE(EXCLUDE_FILE_LIST *feature.o *bigcode.o *index.o *pag1.o) .rodata.*)
            *(.rodata.*_png)
            *(.gnu.linkonce.r.*) 
            *(.rodata1)
        #endif
        . = ALIGN(0x20);
    }

    .roresdata . : AT (ADDR(.roresdata))
    {
        *(.roresdata)
        *(.robsdata)
#if (EXTRA_CODE_SIZE == 0)
        *(.extra)
#endif
        . = ALIGN(0x10);
    }
#ifdef CONST_IN_RAM
    /* Multiple discard output sections will be combined into one. 
     * Not sure if ld can handle multiple discard sections correctly. */
    LD_ASSERT(SIZEOF(.roresdata) == 0, "RESE", "Resource data cannot be loaded in ram.")
#endif

    .rohandwrite . : AT (ADDR(.rohandwrite))
    {
    	*feature.o(.rodata .rodata.*)
    	*bigcode.o(.rodata .rodata.*)
    	*index.o(.rodata .rodata.*)
    	*page1.o(.rodata .rodata.*)
    	. = ALIGN(0x10);
    }


    /*=================================================== */
    /* Placeholder for misc hacks, not used for real apps */
    /*=================================================== */
    .misc . : AT (ADDR(.misc))
    {
        *(.misc)
         . = ALIGN(0x10);
    }

    _flash_end = .;

    /* kept for compatibility */
    _etext = _ram_txt_end;
    _esramtext = _sys_sram_txt_end;
    _end = _ram_bss_end;


    /*=================================================== */
    /* Compressed sections                                */
    /*=================================================== */
#ifdef COMPRESS_PROCESS_ENABLE
    _get_compressed_data_start = .;
    .get_compressed_data _get_compressed_data_start : AT (ADDR(.get_compressed_data))
    {
        *get_compressed_data.o(.get_compressed_data)
#ifdef __NATIVE_JAVA__
	overlay_array_start = 0;
	overlay_array_end = 0;
	overlay_java_common_start = 0;
	overlay_java_common_end = 0;
	overlay_app_qq_start = 0;
	overlay_app_qq_end = 0;
	overlay_app_mreader_start = 0;
	overlay_app_mreader_end = 0;
	overlay_app_ebuddy_start = 0;
	overlay_app_ebuddy_end = 0;
	overlay_app_fruitgame_start = 0;
	overlay_app_fruitgame_end = 0;
	overlay_app_skype_start = 0;
	overlay_app_skype_end = 0;
	overlay_app_msncn_start = 0;
	overlay_app_msncn_end = 0;
	overlay_app_facebook_start = 0;
	overlay_app_facebook_end = 0;
	overlay_app_sinawb_start = 0;
	overlay_app_sinawb_end = 0;
	overlay_app_mxit_start = 0;
	overlay_app_mxit_end = 0;	
	overlay_app_operamini_start = 0;
	overlay_app_operamini_end = 0;		
	overlay_app_tencentwb_start = 0;
	overlay_app_tencentwb_end = 0;	
	overlay_app_angrybirds_start = 0;
	overlay_app_angrybirds_end = 0;
	overlay_app_buyudaren_start = 0;
	overlay_app_buyudaren_end = 0;	
	overlay_app_nimbuzz_start = 0;
	overlay_app_nimbuzz_end = 0;		
	overlay_app_gmail_start = 0;
	overlay_app_gmail_end = 0;		
	overlay_app_twitter_start = 0;
	overlay_app_twitter_end = 0;		
#endif
        init_func_start = 0;
        init_func_end = 0;
        csdapp_start = 0;
        csdapp_end = 0;
        wap_start = 0;
        wap_end = 0;
        jmetoc_start = 0;
        jmetoc_end = 0;
        other_start = 0;
        other_end = 0;
        overlay_2_section_1_start = 0;
        overlay_2_section_1_end = 0;
        overlay_2_section_2_start = 0;
        overlay_2_section_2_end = 0;
        overlay_2_section_3_start = 0;
        overlay_2_section_3_end = 0;
        overlay_3_section_1_start = 0;
        overlay_3_section_1_end = 0;
        overlay_3_section_2_start = 0;
        overlay_3_section_2_end = 0;
        overlay_3_section_3_start = 0;
        overlay_3_section_3_end = 0;
        overlay_4_section_1_start = 0;
        overlay_4_section_1_end = 0;
        overlay_4_section_2_start = 0;
        overlay_4_section_2_end = 0;
        overlay_4_section_3_start = 0;
        overlay_4_section_3_end = 0;
        overlay_4_section_4_start = 0;
        overlay_4_section_4_end = 0;
        overlay_4_section_5_start = 0;
        overlay_4_section_5_end = 0;
        overlay_4_section_6_start = 0;
        overlay_4_section_6_end = 0;
        overlay_4_section_7_start = 0;
        overlay_4_section_7_end = 0;
        overlay_4_section_8_start = 0;
        overlay_4_section_8_end = 0;
        overlay_4_section_9_start = 0;
        overlay_4_section_9_end = 0;        
        overlay_4_section_10_start = 0;
        overlay_4_section_10_end = 0;        
        overlay_4_section_11_start = 0;
        overlay_4_section_11_end = 0;        
        overlay_4_section_12_start = 0;
        overlay_4_section_12_end = 0;        
        overlay_4_section_13_start = 0;
        overlay_4_section_13_end = 0;        
        overlay_4_section_14_start = 0;
        overlay_4_section_14_end = 0;        
        overlay_4_section_15_start = 0;
        overlay_4_section_15_end = 0;        
        . = ALIGN(0x10);
    }
    _get_compressed_data_end  = .;

#ifdef CT_COMPRESS_CODE_SECTION

    LD_ASSERT(RAM_PHY_SIZE >= RAM_SIZE, "RAMS", "Invalid RAM size configuration. Please check RAM_PHY_SIZE and RAM_SIZE in memd.def.")

#ifdef COMPRESS_3264
    #include "compress_code_section_3264.ld"
#else
#ifdef COMPRESS_6464
    #include "compress_code_section_6464.ld"
#else
#ifdef COMPRESS_3232
    #include "compress_code_section_3232.ld"
#else
#ifdef COMPRESS_QVGA3232
    #include "compress_code_section_qvga_3232.ld"
#else
    #include "compress_code_section.ld"
#endif
#endif /* 3232 */
#endif /* 6464 */
#endif /* 3264 */

#endif /* CT_COMPRESS_CODE_SECTION */

#endif /* COMPRESS_PROCESS_ENABLE */

    /*=================================================== */
    /* Codes to fill the hole between user sector and     */
    /* calib sector                                       */
    /*=================================================== */
#if (EXTRA_CODE_SIZE != 0)
    .extra EXTRA_CODE_BASE : AT(ADDR(.extra))
    {
    	_extra_section_start = .;
        *(.extra)
        . = ALIGN(0x10);
    }
    _extra_section_end = .;
    _extra_section_size = _extra_section_end - _extra_section_start;
    extra_rores_size = EXTRA_CODE_SIZE;

    LD_ASSERT(ABSOLUTE(extra_rores_size) > ABSOLUTE(_extra_section_size), "FLAS", "Extra section overflow: Please check EXTRA_RORES_SIZE in memd.def and the .extra section size.")
    extra_remain_size = extra_rores_size - _extra_section_size;
#endif

#else /* COMPRESS_PROCESS_ENABLE && LINK_STAGE_2 */

    #include "link_stage1_elf.ld"

    _code_base = ADDR(.main_entry_section);

    /* _get_compressed_data_start is derived from file ... */
    .get_compressed_data _get_compressed_data_start : AT (ADDR(.get_compressed_data))
    {
        *get_compressed_data.o(.get_compressed_data)
#ifdef __NATIVE_JAVA__
        . = ALIGN(0x20);
        overlay_array_start = .;
/* .ram_bss_overlay_array is a BSS section and has no initial values.
 * The compression and decompression can be bypassed.
        *ram_bss_overlay_array.bin.lzma.o(.data .data.*)
 */
        overlay_array_end = .;
        . = ALIGN(0x20);
        overlay_java_common_start = .;
        *ram_bss_overlay_java_common.bin.lzma.o(.data .data.*)
        overlay_java_common_end = .;
        . = ALIGN(0x20);
        overlay_app_qq_start = .;
        *ram_bss_overlay_app_qq.bin.lzma.o(.data .data.*)
        overlay_app_qq_end = .;
        . = ALIGN(0x20);
        overlay_app_mreader_start = .;
        *ram_bss_overlay_app_mreader.bin.lzma.o(.data .data.*)
        overlay_app_mreader_end = .;
        . = ALIGN(0x20);
        overlay_app_ebuddy_start = .;
        *ram_bss_overlay_app_ebuddy.bin.lzma.o(.data .data.*)
        overlay_app_ebuddy_end = .;
        . = ALIGN(0x20);
        overlay_app_fruitgame_start = .;
        *ram_bss_overlay_app_fruitgame.bin.lzma.o(.data .data.*)
        overlay_app_fruitgame_end = .;
        . = ALIGN(0x20);
        overlay_app_skype_start = .;
        *ram_bss_overlay_app_skype.bin.lzma.o(.data .data.*)
        overlay_app_skype_end = .;
        . = ALIGN(0x20);
        overlay_app_msncn_start = .;
        *ram_bss_overlay_app_msncn.bin.lzma.o(.data .data.*)
        overlay_app_msncn_end = .;
        . = ALIGN(0x20);
        overlay_app_facebook_start = .;
        *ram_bss_overlay_app_facebook.bin.lzma.o(.data .data.*)
        overlay_app_facebook_end = .;
        . = ALIGN(0x20);
        overlay_app_sinawb_start = .;
        *ram_bss_overlay_app_sinawb.bin.lzma.o(.data .data.*)
        overlay_app_sinawb_end = .;
        . = ALIGN(0x20);
        overlay_app_mxit_start = .;
        *ram_bss_overlay_app_mxit.bin.lzma.o(.data .data.*)
        overlay_app_mxit_end = .;	
        . = ALIGN(0x20);
        overlay_app_operamini_start = .;
        *ram_bss_overlay_app_operamini.bin.lzma.o(.data .data.*)
        overlay_app_operamini_end = .;
        . = ALIGN(0x20);
        overlay_app_tencentwb_start = .;
        *ram_bss_overlay_app_tencentwb.bin.lzma.o(.data .data.*)
        overlay_app_tencentwb_end = .;
        . = ALIGN(0x20);
        overlay_app_angrybirds_start = .;
        *ram_bss_overlay_app_angrybirds.bin.lzma.o(.data .data.*)
        overlay_app_angrybirds_end = .;
        . = ALIGN(0x20);
        overlay_app_buyudaren_start = .;
        *ram_bss_overlay_app_buyudaren.bin.lzma.o(.data .data.*)
        overlay_app_buyudaren_end = .;
        . = ALIGN(0x20);
        overlay_app_nimbuzz_start = .;
        *ram_bss_overlay_app_nimbuzz.bin.lzma.o(.data .data.*)
        overlay_app_nimbuzz_end = .;
        . = ALIGN(0x20);
        overlay_app_gmail_start = .;
        *ram_bss_overlay_app_gmail.bin.lzma.o(.data .data.*)
        overlay_app_gmail_end = .;
        . = ALIGN(0x20);
        overlay_app_twitter_start = .;
        *ram_bss_overlay_app_twitter.bin.lzma.o(.data .data.*)
        overlay_app_twitter_end = .;
#endif
        . = ALIGN(0x20);
        init_func_start = .;
        *xcpu_overlay_init_func.bin.lzma.o(.data .data.*)
        init_func_end = .;
        . = ALIGN(0x20);
        csdapp_start = .;
        *xcpu_overlay_csdapp.bin.lzma.o(.data .data.*)
        csdapp_end = .;
        . = ALIGN(0x20);
        wap_start = .;
        *xcpu_overlay_wap.bin.lzma.o(.data .data.*)
        wap_end = .;
        . = ALIGN(0x20);
        jmetoc_start = .;
        *xcpu_overlay_jmetoc.bin.lzma.o(.data .data.*)
        jmetoc_end = .;
        . = ALIGN(0x20);
        other_start = .;
        *xcpu_overlay_other.bin.lzma.o(.data .data.*)
        other_end = .;
        . = ALIGN(0x20);
        overlay_2_section_1_start = .;
        *overlay_2_section_1.bin.lzma.o(.data .data.*)
        overlay_2_section_1_end = .;
        . = ALIGN(0x20);
        overlay_2_section_2_start = .;
        *overlay_2_section_2.bin.lzma.o(.data .data.*)
        overlay_2_section_2_end = .;
        . = ALIGN(0x20);
        overlay_2_section_3_start = .;
        *overlay_2_section_3.bin.lzma.o(.data .data.*)
        overlay_2_section_3_end = .;
        . = ALIGN(0x20);
        overlay_3_section_1_start = .;
        *overlay_3_section_1.bin.lzma.o(.data .data.*)
        overlay_3_section_1_end = .;
        . = ALIGN(0x20);
        overlay_3_section_2_start = .;
        *overlay_3_section_2.bin.lzma.o(.data .data.*)
        overlay_3_section_2_end = .;
        . = ALIGN(0x20);
        overlay_3_section_3_start = .;
        *overlay_3_section_3.bin.lzma.o(.data .data.*)
        overlay_3_section_3_end = .;
        . = ALIGN(0x20);
        overlay_4_section_1_start = .;
        *overlay_4_section_1.bin.lzma.o(.data .data.*)
        overlay_4_section_1_end = .;
        . = ALIGN(0x20);
        overlay_4_section_2_start = .;
        *overlay_4_section_2.bin.lzma.o(.data .data.*)
        overlay_4_section_2_end = .;
        . = ALIGN(0x20);
        overlay_4_section_3_start = .;
        *overlay_4_section_3.bin.lzma.o(.data .data.*)
        overlay_4_section_3_end = .;
        . = ALIGN(0x20);
        overlay_4_section_4_start = .;
        *overlay_4_section_4.bin.lzma.o(.data .data.*)
        overlay_4_section_4_end = .;
        . = ALIGN(0x20);
        overlay_4_section_5_start = .;
        *overlay_4_section_5.bin.lzma.o(.data .data.*)
        overlay_4_section_5_end = .;
        . = ALIGN(0x20);
        overlay_4_section_6_start = .;
        *overlay_4_section_6.bin.lzma.o(.data .data.*)
        overlay_4_section_6_end = .;
        . = ALIGN(0x20);
        overlay_4_section_7_start = .;
        *overlay_4_section_7.bin.lzma.o(.data .data.*)
        overlay_4_section_7_end = .;
        . = ALIGN(0x20);
        overlay_4_section_8_start = .;
        *overlay_4_section_8.bin.lzma.o(.data .data.*)
        overlay_4_section_8_end = .;
        . = ALIGN(0x20);
        overlay_4_section_9_start = .;
        *overlay_4_section_9.bin.lzma.o(.data .data.*)
        overlay_4_section_9_end = .;
        . = ALIGN(0x20);        
        overlay_4_section_10_start = .;
        *overlay_4_section_10.bin.lzma.o(.data .data.*)
        overlay_4_section_10_end = .;
        . = ALIGN(0x20);        
        overlay_4_section_11_start = .;
        *overlay_4_section_11.bin.lzma.o(.data .data.*)
        overlay_4_section_11_end = .;
        . = ALIGN(0x20);        
        overlay_4_section_12_start = .;
        *overlay_4_section_12.bin.lzma.o(.data .data.*)
        overlay_4_section_12_end = .;
        . = ALIGN(0x20);        
        overlay_4_section_13_start = .;
        *overlay_4_section_13.bin.lzma.o(.data .data.*)
        overlay_4_section_13_end = .;
        . = ALIGN(0x20);        
        overlay_4_section_14_start = .;
        *overlay_4_section_14.bin.lzma.o(.data .data.*)
        overlay_4_section_14_end = .;
        . = ALIGN(0x20);        
        overlay_4_section_15_start = .;
        *overlay_4_section_15.bin.lzma.o(.data .data.*)
        overlay_4_section_15_end = .;
        . = ALIGN(0x20);        
    }
    _get_compressed_data_end  = .;

    _flash_end = .;

#endif /* COMPRESS_PROCESS_ENABLE && LINK_STAGE_2 */


    /*================================================= */
    /* Define user data boundaries based on the defines */
    /*================================================= */
    .user_data USER_DATA_BASE  : AT (ADDR(.user_data))
    {
        _user_data_start = .;
#if !(defined(COMPRESS_PROCESS_ENABLE) && !defined(LINK_STAGE_2))
        *user.bin.o(.user_data);
        KEEP(*(.user_data))
#endif
    }
    _user_data_end = .;
    _user_data_size = _user_data_end - _user_data_start;


    /*Check that the data and code in flash do not overwrite
     * the user data space */
    /* ASSERT seems to be boguous as of binutils-2.15 : we are
     * not allowed to used error messages longer than FLAS in that
     * particular case. Don't ask and port a newer version,
     * maybe. FIXME */
    LD_ASSERT(ABSOLUTE(_user_data_start) > ABSOLUTE(_flash_end),
              "FLAS",
              "Flash overflow: there is no more space available in flash memory.")


    /* ============================== */
    /* calib sector in flash          */
    /* ============================== */

    .calib CALIB_BASE : AT (ADDR(.calib))
    {
        _calib_start = .;
        *(.calib);
        . = ALIGN(0x10);
    }
    _calib_end = .;
    _calib_size = _calib_end - _calib_start;


    /* ============================== */
    /* factory settings in flash      */
    /* ============================== */

    .factory_settings FACT_SETTINGS_BASE : AT (ADDR(.factory_settings))
    {
        _factory_start = .;
        *(.factory_settings)
        . = ALIGN(0x10);
    }
    _factory_end = .;
    _factory_size = _factory_end - _factory_start;

    /* Legal layout patterns:
     * 1) Code (including boot code) -> User Data -> Calib Data -> Factory Data
     * 2) Boot Sector -> Calib Data -> Factory Data -> Code (excluding boot code) -> User Data
     * /

    /*Check that the user data in flash do not overwrite
     * the calib data or factory setting space */
    LD_ASSERT(ABSOLUTE(_calib_start) >= ABSOLUTE(_user_data_end) || 
              ABSOLUTE(_factory_start) > ABSOLUTE(_code_base),
              "CFOV", "Calib data is overlapped with user data or factory data is overlapped with code.")

    /*Check that the calib data in flash do not overwrite
     * the factory setting data space */
    LD_ASSERT(ABSOLUTE(_factory_start) > ABSOLUTE(_calib_start),
              "FACO", "Factory setting data is overlapped with calib data.")


    #include "discard.ld"
}

